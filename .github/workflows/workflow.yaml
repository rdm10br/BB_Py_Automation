name: Continuous Integration

on:
  push:
    branches:
      - 'dev'
  pull_request:
    branches:
      - 'Master'

jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      # - name: Use Python 3.12
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.12'

      # - name: Install dependencies
      #   run: |
      #     python -m venv venv
      #     source venv/bin/activate
      #     pip install --upgrade pip
      #     pip install -r requirements.txt --force-reinstall
      #     python -m playwright install
      #     python -m spacy download pt_core_news_sm

      - name: Fetch tags
        run: git fetch --tags

      - name: Determine next version
        id: next_version
        run: |
          # Get the latest tag or fallback to v0.0.0 if no tag exists
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract major, minor, and patch parts from the tag
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}

          # Determine the type of version bump (major, minor, patch)
          VERSION_BUMP="patch"  # Default to patch
          if git log -1 --pretty=%B | grep -qE '\[major\]'; then
            VERSION_BUMP="major"
          elif git log -1 --pretty=%B | grep -qE '\[minor\]'; then
            VERSION_BUMP="minor"
          fi

          # Bump the appropriate part based on the version bump type
          case "$VERSION_BUMP" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          # Create the new version tag
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          
          # Save the new tag to the GITHUB_ENV for later use
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Configure Git user
        run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"

      - name: Check if tag already exists
        run: |
          if git rev-parse "${{ env.NEW_TAG }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.NEW_TAG }} already exists. Aborting."
            exit 1
          fi
      
      - name: Update release.json
        run: |
          echo "Updating release.json with version ${{ env.NEW_TAG }}"
          echo '{"CURRENT_VERSION": "'${{ env.NEW_TAG }}'"}' > release.json
  
      - name: Commit release.json
        run: |
          git add release.json
          git commit -m "ðŸ’š ci: Update release.json to ${{ env.NEW_TAG }}"
          git push origin HEAD

      - name: Create a new tag
        run: |
          git tag -a ${{ env.NEW_TAG }} -m "CI release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required to push the tag
